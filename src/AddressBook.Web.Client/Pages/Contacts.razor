@page "/contacts"
@rendermode InteractiveWebAssembly

@using AddressBook.Contracts.Models
@inject HttpClient Http

<PageTitle>Contacts</PageTitle>

<h1>Contacts</h1>

<div>
    <input @bind="_searchTerm" placeholder="Search contacts..." aria-label="Search contacts" />
    <button @onclick="SearchContacts" disabled="@_isLoading">Search</button>
    <button @onclick="ClearSearch" disabled="@_isLoading">Clear</button>
</div>

@if (_contacts == null)
{
    <p><em>@_status</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Lat Name</th>
                <th>Birthday</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contact in _contacts)
            {
                <tr>
                    <td>@contact.FirstName</td>
                    <td>@contact.LastName</td>
                    <td>@contact.Birthday?.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string _status = "Press Search button";
    private string _searchTerm = string.Empty;
    private ContactModel[]? _contacts;
    private bool _isLoading;

    private async Task LoadContacts()
    {
        try
        {
            _contacts = null;
            _status = "Loading...";
            _isLoading = true;

            var requestUri = "/api/contacts";
            if (!string.IsNullOrWhiteSpace(_searchTerm))
                requestUri += $"?search={_searchTerm}";

            var response = await Http.GetFromJsonAsync<GetFilteredContactsResponse>(requestUri);
            _contacts = response?.Rows.ToArray();
        }
        catch (Exception ex)
        {
            _status = $"Error: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task SearchContacts()
    {
        await LoadContacts(); 
    }

    private async Task ClearSearch()
    {
        _searchTerm = string.Empty;
        await LoadContacts();
    }
}
@page "/create-contact"
@using AddressBook.Web.ErrorHandling
@using AddressBook.Web.Models
@inject NavigationManager Navigation
@inject IAddressBookApiService AddressBookApiService

<EditForm EditContext="_editContext" OnSubmit="HandleCreateContact">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" @bind-Value="_model.FirstName" For="@(() => _model.FirstName)" />
                    <MudTextField Label="Last Name" Class="mt-3" @bind-Value="_model.LastName" For="@(() => _model.LastName)" />
                    <MudDatePicker Label="Birthday" @bind-Date="_model.Birthday" For="@(() => _model.Birthday)" />
                    <ValidationSummary Model="_model" class="mt-4"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" disabled="@_isLoading">Create</MudButton>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="Cancel" Class=" ms-2">Cancel</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    private readonly CreateContactModel _model = new();
    private EditContext _editContext = null!;
    private ValidationMessageStore? _messageStore;
    private bool _isLoading;

    protected override void OnInitialized()
    {
        _editContext = new(_model);
        _messageStore = new(_editContext);
    }

    private async Task HandleCreateContact()
    {
        _messageStore?.Clear();
        _editContext.NotifyValidationStateChanged();
        if (!_editContext.Validate())
            return;

        StateHasChanged();
        try
        {
            _isLoading = true;
            await AddressBookApiService.CreateContact(_model);
            Navigation.NavigateTo("/contacts");
        }
        catch (ProblemDetailsException ex)
        {
            AddCustomError(ex.ProblemDetails);
        }
        catch (Exception ex)
        {
            AddGeneralError(ex.Message);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void AddGeneralError(string message)
    {
        _messageStore?.Add(_editContext.Field(""), message);
        _editContext.NotifyValidationStateChanged();
    }

    private void AddCustomError(ClientProblemDetails? problem)
    {
        var errors = problem?.GetErrors();
        if (errors == null)
            return;


        foreach (var error in errors)
            _messageStore?.Add(_editContext.Field(error.Key), error.Value);

        _editContext.NotifyValidationStateChanged();
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/contacts");
    }
}
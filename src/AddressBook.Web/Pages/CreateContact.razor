@page "/create-contact"
@using AddressBook.Web.ErrorHandling
@using AddressBook.Web.Models
@inject NavigationManager Navigation
@inject IAddressBookApiService AddressBookApiService

<EditForm EditContext="_editContext" OnSubmit="HandleCreateContact">
    <MatCard class="demo-mat-card">
        <MatCardContent>
            <MatHeadline5>Create Contact</MatHeadline5>
            <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                <DataAnnotationsValidator/>
                <ValidationSummary Model="_model"/>

                <div>
                    <MatTextField Label="First Name" @bind-Value="_model.FirstName"/>
                    <ValidationMessage For="@(() => _model.FirstName)"/>
                </div>
                <div>
                    <MatTextField Label="Last Name" @bind-Value="_model.LastName"/>
                    <ValidationMessage For="@(() => _model.LastName)"/>
                </div>
                <div>
                    <MatDatePicker Label="Birthday" @bind-Value="@_model.Birthday"></MatDatePicker>
                    <MatButton @onclick="EmptyBirthdayValue">Empty</MatButton>
                    <ValidationMessage For="@(() => _model.Birthday)" />
                </div>
            </MatBody2>
        </MatCardContent>
        <MatCardActions>
            <MatButton type="submit">Create</MatButton>
            <MatButton @onclick="Cancel">Cancel</MatButton>
        </MatCardActions>
    </MatCard>
</EditForm>

@code {

    private readonly CreateContactModel _model = new();
    private EditContext _editContext = null!;
    private ValidationMessageStore _messageStore = null!;
    private bool _isEmptyButtonPressed;

    protected override void OnInitialized()
    {
        _editContext = new(_model);
        _messageStore = new(_editContext);
    }

    private async Task HandleCreateContact()
    {
        // strange thing. When the Empty button is pressed, it is interpreted as Submit action.
        // I couldn't find root cause of the issue, so I added a workaround.:(
        if (_isEmptyButtonPressed)
        {
            _isEmptyButtonPressed = false;
            return;
        }

        _messageStore.Clear();
        if (!_editContext.Validate())
            return;
        try
        {
            _model.Birthday = _model.Birthday?.ToLocalTime();
            await AddressBookApiService.CreateContact(_model);
            Navigation.NavigateTo("/contacts");
        }
        catch (ProblemDetailsException ex)
        {
            AddCustomError(ex.ProblemDetails);
        }
        catch (Exception ex)
        {
            AddGeneralError(ex.Message);
        }
    }

    private void AddGeneralError(string message)
    {

        _messageStore.Add(_editContext.Field(""), message);
        _editContext.NotifyValidationStateChanged();
    }

    private void AddCustomError(ClientProblemDetails? problem)
    {
        var errors = problem?.GetErrors();
        if (errors == null)
            return;


        foreach (var error in errors)
            _messageStore.Add(_editContext.Field(error.Key), error.Value);

        _editContext.NotifyValidationStateChanged();
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/contacts");
    }

    private void EmptyBirthdayValue()
    {
        _isEmptyButtonPressed = true;
        _model.Birthday = null;
    }
}